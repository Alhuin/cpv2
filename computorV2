#!/Users/jjanin-r/.brew/bin/python3
# -*- coding: utf-8 -*-

import sys
import re
import tests as t
from resolve import resolve
from includes import utils as u, regex, cpv1_computor as cpv1
from includes.customError import CustomError
from includes.types import Function


def parsePut(key, exp, data):
    match = re.match(regex.func, key)
    if match:
        exp = u.checkUnknownVars(exp, match.group(2).strip(), data)
        if exp is not None:
            value = Function(exp, match.group(2), data)
            key = match.group(1)[0:4]
        else:
            u.warn("Too many unknown variables.", "SyntaxError")
    else:
        value = resolve(exp, data)
    if value.getType() == "function" and not re.match("fun[A-Za-z]", key):
        u.warn("Variables containing functions must be named 'fun[A-Z]'", "NameError")
    data[key] = value
    data[key].print(None)


def compute(line, data):
    reset = re.match(regex.reset, line)
    get = re.match(regex.get, line)
    put = re.match(regex.put, line)
    if get:
        key = get.group(1).strip()
        if key == "" or '=' in key:
            u.warn("Invalid input.", "SyntaxError")
        res = resolve(key, data)
        res.print(None)
    elif put:
        exp = put.group(2).strip()
        if exp == "" or '=' in exp or '?' in exp:
            u.warn("Invalid input.", "SyntaxError")
        key = put.group(1).strip()
        if key == "i":
            u.warn("Can't assign the variable i.", "NameError")
        if re.match("^\s*fun[A-Z]\s*$", key, flags=re.IGNORECASE):
            u.warn("fun[A-Z] name is restricted to functions.", "NameError")
        parsePut(key, exp, data)
    elif reset:
        key = reset.group(1).strip()
        if key == "all":
            data.clear()
            u.out("All variables have been cleared.")
        elif key in data.keys():
            del data[key]
            u.out("The variable " + key + " has been cleared.")
        else:
            u.warn(key + " matches no variable.\n", "NameError")
    else:
        line = u.checkPolynomial(line, data)
        cpv1.tryPolynomial(line)


def main():
    data = {}
    if len(sys.argv) > 1:
        if sys.argv[1] == "-test":
            t.test = True
        elif sys.argv[1] == "-h" or sys.argv[1] == "--help":
            u.printHelp()
            sys.exit()
        else:
            print("\033[31m[IllegalOption]\033[0m Unsupported flag : " + sys.argv[1])
            sys.exit()

    line = ""
    while line is not None:
        try:
            line = u.read_in(data)
            compute(line, data)
        except KeyboardInterrupt:
            sys.exit('')
        except CustomError:
            pass


main()
